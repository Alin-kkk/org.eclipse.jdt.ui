/* * (c) Copyright IBM Corp. 2000, 2001. * All Rights Reserved. */package org.eclipse.jdt.internal.ui.exampleprojects;import java.io.File;import java.io.IOException;import java.lang.reflect.InvocationTargetException;import java.net.URL;import java.util.ArrayList;import java.util.zip.ZipFile;import org.eclipse.swt.widgets.Shell;import org.eclipse.core.resources.IProject;import org.eclipse.core.resources.IResource;import org.eclipse.core.runtime.IConfigurationElement;import org.eclipse.core.runtime.IPath;import org.eclipse.core.runtime.IProgressMonitor;import org.eclipse.core.runtime.NullProgressMonitor;import org.eclipse.core.runtime.Path;import org.eclipse.core.runtime.Platform;import org.eclipse.core.runtime.SubProgressMonitor;import org.eclipse.jface.dialogs.Dialog;import org.eclipse.jface.dialogs.IDialogConstants;import org.eclipse.jface.dialogs.MessageDialog;import org.eclipse.jface.operation.IRunnableWithProgress;import org.eclipse.ui.dialogs.IOverwriteQuery;import org.eclipse.ui.wizards.datatransfer.ImportOperation;import org.eclipse.ui.wizards.datatransfer.ZipFileStructureProvider;import org.eclipse.jdt.core.IClasspathEntry;import org.eclipse.jdt.core.IJavaElement;import org.eclipse.jdt.core.JavaCore;import org.eclipse.jdt.core.JavaModelException;import org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPage;public class ExampleProjectCreationOperation implements IRunnableWithProgress {			private NewJavaProjectWizardPage fJavaProjectPage;	private IProject fProject;	private IResource fResourceToReveal;		private IConfigurationElement fConfigElement;		private Shell fShell;		/**	 * Constructor for CreateJUnitProjectOperation	 */	public ExampleProjectCreationOperation(Shell shell, IProject currProject, IConfigurationElement configElement, NewJavaProjectWizardPage javaProjectPage) {		fJavaProjectPage= javaProjectPage;		fProject= currProject;		fConfigElement= configElement;		fShell= shell;	}		/**	 * @see IRunnableWithProgress#run(IProgressMonitor)	 */	public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {		if (monitor == null) {			monitor= new NullProgressMonitor();		}				IConfigurationElement desc;		IConfigurationElement[] children = fConfigElement.getChildren("projectsetup"); //$NON-NLS-1$		if (children.length == 1) {			desc= children[0];		} else {			ExampleProjectsPlugin.log("descriptor must contain exactly on projectsetup tag"); //$NON-NLS-1$			return;		}		IPath outputFolder;		String output= desc.getAttribute("output"); //$NON-NLS-1$		if (output == null || output.length() == 0) {			outputFolder= fProject.getFullPath();		} else {			outputFolder= fProject.getFullPath().append(new Path(output));		}		String jre= desc.getAttribute("jre"); //$NON-NLS-1$		boolean addJRE= "true".equals(jre); //$NON-NLS-1$				ArrayList classPathEntries= new ArrayList();		ArrayList importPaths= new ArrayList();				children = desc.getChildren("src"); //$NON-NLS-1$		for (int i= 0; i < children.length; i++) {			IConfigurationElement curr= children[i];			IPath path;			String name= curr.getAttribute("path"); //$NON-NLS-1$			if (name == null || name.length() == 0) {				path= fProject.getFullPath();			} else {				path= fProject.getFolder(name).getFullPath();			}			classPathEntries.add(JavaCore.newSourceEntry(path));			String importPath= curr.getAttribute("import"); //$NON-NLS-1$			if (importPath == null) {				importPath= ""; //$NON-NLS-1$				ExampleProjectsPlugin.log("projectsetup descriptor: path missing"); //$NON-NLS-1$			}			importPaths.add(importPath);		}				fJavaProjectPage.setDefaultOutputFolder(outputFolder);		IClasspathEntry[] entries= new IClasspathEntry[classPathEntries.size()];		classPathEntries.toArray(entries);		fJavaProjectPage.setDefaultClassPath(entries, addJRE);						monitor.beginTask(ExampleProjectMessages.getString("ExampleProjectCreationOperation.op_desc"), 3 + entries.length); //$NON-NLS-1$				try {				// create the project			fJavaProjectPage.getRunnable().run(new SubProgressMonitor(monitor, 3));						// import			for (int i= 0; i < entries.length; i++) {				IPath destPath= entries[i].getPath();				String importPath= (String)importPaths.get(i);				if (importPath.length() > 0) {					ZipFile zipFile= new ZipFile(getFileFromPluginDir(importPath));					importFilesFromZip(zipFile, destPath, new SubProgressMonitor(monitor, 1));				}			}					fResourceToReveal= fProject;			String reveal= desc.getAttribute("open"); //$NON-NLS-1$			if (reveal != null && reveal.length() > 0) {				IJavaElement elem= fJavaProjectPage.getNewJavaProject().findElement(new Path(reveal));				if (elem != null) {					fResourceToReveal= elem.getUnderlyingResource();				}			}		} catch (IOException e) {			throw new InvocationTargetException(e);		} catch (JavaModelException e) {			throw new InvocationTargetException(e);					} finally {			monitor.done();		}	}				public IResource getResourceToReveal() {		return fResourceToReveal;	}		private File getFileFromPluginDir(String pluginRelativePath) throws IOException {		URL starterURL= new URL(ExampleProjectsPlugin.getDefault().getDescriptor().getInstallURL(), pluginRelativePath);		return new File(Platform.asLocalURL(starterURL).getFile());	}		private void importFilesFromZip(ZipFile srcZipFile, IPath destPath, IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {				ZipFileStructureProvider structureProvider=	new ZipFileStructureProvider(srcZipFile);		ImportOperation op= new ImportOperation(destPath, structureProvider.getRoot(), structureProvider, new ImportOverwriteQuery());		op.run(monitor);	}		public class ImportOverwriteQuery implements IOverwriteQuery {			public String queryOverwrite(String file) {			String[] returnCodes= {YES, NO, ALL, CANCEL};			int returnVal= openDialog(file);			return returnVal < 0 ? CANCEL : returnCodes[returnVal];		}					private int openDialog(final String file) {			final int[] result= { Dialog.CANCEL };			fShell.getDisplay().syncExec(new Runnable() {				public void run() {					String title= ExampleProjectMessages.getString("ExampleProjectCreationOperation.overwritequery.title"); //$NON-NLS-1$					String msg= ExampleProjectMessages.getFormattedString("ExampleProjectCreationOperation.overwritequery.message", file); //$NON-NLS-1$					String[] options= {IDialogConstants.YES_LABEL, IDialogConstants.NO_LABEL, IDialogConstants.YES_TO_ALL_LABEL, IDialogConstants.CANCEL_LABEL};					MessageDialog dialog= new MessageDialog(fShell, title, null, msg, MessageDialog.QUESTION, options, 0);					result[0]= dialog.open();				}			});			return result[0];		}	}		}