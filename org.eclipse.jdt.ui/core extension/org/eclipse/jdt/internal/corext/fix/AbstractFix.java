package org.eclipse.jdt.internal.corext.fix;

import java.util.Map;

import org.eclipse.text.edits.TextEdit;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.filebuffers.FileBuffers;
import org.eclipse.core.filebuffers.ITextFileBufferManager;

import org.eclipse.jface.text.IDocument;

import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.dom.rewrite.ASTRewrite;

import org.eclipse.jdt.internal.corext.codemanipulation.ImportRewrite;


public abstract class AbstractFix implements IFix {
	
	private final String fName;
	private final ICompilationUnit fCompilationUnit;
	
	protected AbstractFix(String name, ICompilationUnit compilationUnit) {
		fName= name;
		fCompilationUnit= compilationUnit;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.jdt.internal.corext.fix.IFix#getName()
	 */
	public String getDescription() {
		return fName;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.jdt.internal.corext.fix.IFix#getCompilationUnit()
	 */
	public ICompilationUnit getCompilationUnit() {
		return fCompilationUnit;
	}
	
	/**
	 * Helper to apply a <code>ASTRewrite</code> and a <code>ImportRewrite</code> to a 
	 * <code>ICompilationUnit</code> to calculate a <code>TextEdit</code> generated by
	 * the rewrites.
	 * 
	 * @param compilationUnit The compilationUnit to applay to, not null
	 * @param rewrite The rewrite to applay, not null
	 * @param imports Import rewrites to applay, may be null
	 * @return The TextEdit
	 * @throws CoreException
	 */
	protected TextEdit applyEdits(ICompilationUnit compilationUnit, ASTRewrite rewrite, ImportRewrite imports) throws CoreException {
		ITextFileBufferManager manager= FileBuffers.getTextFileBufferManager();
		IPath path= compilationUnit.getPath();
		manager.connect(path, null);
		try {
			IDocument document= manager.getTextFileBuffer(path).getDocument();
			
			Map options= compilationUnit.getJavaProject().getOptions(true);
			TextEdit edit= rewrite.rewriteAST(document, options);
	
			if (imports != null && !imports.isEmpty()) {
				edit.addChild(imports.createEdit(document, new NullProgressMonitor()));
			}
			return edit;
		} finally {
			manager.disconnect(path, null);
		}
	}
}
