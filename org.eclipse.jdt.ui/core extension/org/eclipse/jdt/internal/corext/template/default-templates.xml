<?xml version="1.0" encoding="UTF-8"?>

<!--
(c) Copyright IBM Corp. 2000, 2001.
All Rights Reserved.
-->

<templates>

  <!-- java -->

  <template description="iterate over array" name="for" context="java"
>for (int ${index} = 0; ${index} &lt; ${array}.length; ${index}++) {
	${cursor}
}</template>

  <template description="iterate over array w/ temporary variable" name="for" context="java"
>for (int ${index} = 0; ${index} &lt; ${array}.length; ${index}++) {
	${array_type} ${array_element} = ${array}[${index}];
	${cursor}
}</template>

  <template description="iterate over collection" name="for" context="java"
>for (Iterator ${iterator} = ${collection}.iterator(); ${iterator}.hasNext(); ) {
	${type} ${element} = (${type}) ${iterator}.next();
	${cursor}
}</template>

  <template description="iterate with enumeration" name="while" context="java"
>while (${enumeration}.hasMoreElements()) {
	${type} ${element} = (${type}) ${enumeration}.nextElement();
	${cursor}
}</template>

  <template description="iterate with iterator" name="while" context="java"
>while (${iterator}.hasNext()) {
	${type} ${element} = (${type}) ${iterator}.next();
	${cursor}
}</template>

  <template description="do while statement" name="do" context="java"
>do {
	${cursor}
} while (${condition});</template>

  <template description="switch case statement" name="switch" context="java"
>switch (${key}) {
	case ${value}:
		${cursor}
		break;

	default:
		break;
}</template>

  <template description="if statement" name="if" context="java"
>if (${condition}) {
	${cursor}
}</template>

  <template description="if else statement" name="ifelse" context="java"
>if (${condition}) {
	${cursor}
} else {
	
}</template>

  <template description="else if block" name="elseif" context="java"
>else if (${condition}) {
	${cursor}
}</template>

  <template description="else block" name="else" context="java"
>else {
	${cursor}
}</template>

  <template description="try catch block" name="try" context="java"
>try {
	${cursor}
} catch (${Exception} e) {
	// ${todo}: handle exception
}</template>

  <template description="catch block" name="catch" context="java"
>catch (${Exception} e) {
	${cursor}// ${todo}: handle exception
}</template>

  <template description="main method" name="main" context="java"
>
public static void main(String[] args) {
	${cursor}
}</template>

  <template description="public method" name="public_method" context="java"
>
public ${return_type} ${name}(${arguments}) {
	${cursor}
}</template>

  <template description="protected method" name="protected_method" context="java"
>protected ${return_type} ${name}(${arguments}) {
	${cursor}
}</template>

  <template description="private method" name="private_method" context="java"
>private ${return_type} ${name}(${arguments}) {
	${cursor}
}</template>

  <template description="private static method" name="private_static_method" context="java"
>private static ${return_type} ${name}(${arguments}) {
	${cursor}
}</template>

  <template description="dynamic type test and cast" name="instanceof" context="java"
>if (${name} instanceof ${type}) {
	${type} ${new_name} = (${type})${name};
	${cursor}
}</template>

  <template description="dynamic cast" name="cast" context="java"
>${type} ${new_name} = (${type}) ${name};
</template>

  <template description="create new object" name="new" context="java"
>${type} ${name} = new ${type}(${arguments});
</template>

  <template description="lazy creation" name="lazy" context="java"
>if (${name} == null) {
	${name} = new ${type}(${arguments});
	${cursor}
}

return ${name};
</template>

  <template description="convert collection to array" name="toarray" context="java"
  >(${type}[]) ${collection}.toArray(new ${type}[${collection}.size()]);</template>

  <template context="java" description="file comment used by the class and interface wizards" enabled="true" name="filecomment">/*
 * Created on ${date}
 *
 * To change this generated comment edit the template variable &quot;filecomment&quot;:
 * Window&gt;Preferences&gt;Java&gt;Templates.
 * To enable and disable the creation of file comments go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation.
 */</template>

<template name="typecomment" description="type comment used by the class and interface wizards" context="java" enabled="true">/**
 * @author ${user}
 *
 * To change this generated comment edit the template variable &quot;typecomment&quot;:
 * Window&gt;Preferences&gt;Java&gt;Templates.
 * To enable and disable the creation of type comments go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation.
 */</template> 

  <template description="print to standard out" name="stdout" context="java"
  >System.out.println(${cursor});</template>

  <template description="print to standard error" name="stderr" context="java"
  >System.err.println(${cursor});</template>

  <!-- javadoc -->

  <template description="&lt;code&gt;&lt;/code&gt;" name="&lt;code&gt;" context="javadoc"
  >&lt;code&gt;${cursor}&lt;/code&gt;</template>

  <template description="&lt;code&gt;null&lt;/code&gt;" name="&lt;code&gt;" context="javadoc"
  >&lt;code&gt;null&lt;/code&gt;</template>

  <template description="&lt;pre&gt;&lt;/pre&gt;" name="&lt;pre&gt;" context="javadoc"
  >&lt;pre&gt;${cursor}&lt;/pre&gt;</template>

  <template description="&lt;b&gt;&lt;/b&gt;" name="&lt;b&gt;" context="javadoc"
  >&lt;b&gt;${cursor}&lt;/b&gt;</template>

  <template description="&lt;i&gt;&lt;/i&gt;" name="&lt;i&gt;" context="javadoc"
  >&lt;i&gt;${cursor}&lt;/i&gt;</template>

  <template description="author name" name="@author" context="javadoc"
  >@author ${user}</template>

</templates>
