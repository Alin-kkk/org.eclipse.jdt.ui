/* * (c) Copyright IBM Corp. 2000, 2001. * All Rights Reserved. */package org.eclipse.jdt.internal.core.refactoring;import org.eclipse.core.resources.IResource;import org.eclipse.core.resources.ResourcesPlugin;import org.eclipse.core.runtime.IPath;import org.eclipse.core.runtime.IProgressMonitor;import org.eclipse.jdt.core.IJavaElement;import org.eclipse.jdt.core.ISourceManipulation;import org.eclipse.jdt.core.JavaCore;import org.eclipse.jdt.core.JavaModelException;import org.eclipse.jdt.internal.core.refactoring.Assert;import org.eclipse.jdt.internal.core.refactoring.NullChange;import org.eclipse.jdt.internal.core.refactoring.base.Change;import org.eclipse.jdt.internal.core.refactoring.base.ChangeContext;import org.eclipse.jdt.internal.core.refactoring.base.IChange;
public abstract class AbstractRenameChange extends Change {
	private String fNewName;	private String fOldName;	private IPath fResourcePath;	private IChange fUndoChange;		protected AbstractRenameChange(IPath resourcePath, String oldName, String newName){		Assert.isNotNull(newName, "new name");		Assert.isNotNull(oldName, "old name");				fResourcePath= resourcePath;		fOldName= oldName;		fNewName= newName;	}		private IResource getResource(){		return ResourcesPlugin.getWorkspace().getRoot().findMember(fResourcePath);	}		public IJavaElement getCorrespondingJavaElement() {		return JavaCore.create(getResource());	}	public final IChange getUndoChange() {		return fUndoChange;	}		protected abstract IChange createUndoChange() throws JavaModelException;	public void perform(ChangeContext context, IProgressMonitor pm) throws JavaModelException {		try{			pm.beginTask("Renaming...", 1);			if (isActive()){				fUndoChange= createUndoChange();				ISourceManipulation element= (ISourceManipulation)getCorrespondingJavaElement();				element.rename(fNewName, false, pm);			} else{				fUndoChange= new NullChange();			}		} catch (Exception e) {			handleException(context, e);			fUndoChange= new NullChange();			setActive(false);		} finally {			pm.done();		}	}	/**	 * Gets the newName.	 * @return Returns a String	 */	protected String getNewName() {		return fNewName;	}	/**	 * Gets the resourcePath.	 * @return Returns a IPath	 */	protected IPath getResourcePath() {		return fResourcePath;	}
	/**	 * Gets the oldName	 * @return Returns a String	 */	protected String getOldName() {		return fOldName;	}}
