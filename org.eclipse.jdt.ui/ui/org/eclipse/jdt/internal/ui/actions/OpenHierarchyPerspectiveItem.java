/* * (c) Copyright IBM Corp. 2000, 2001. * All Rights Reserved. */package org.eclipse.jdt.internal.ui.actions;import org.eclipse.swt.SWT;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.widgets.Menu;import org.eclipse.swt.widgets.MenuItem;import org.eclipse.jface.action.ContributionItem;import org.eclipse.jface.preference.IPreferenceStore;import org.eclipse.ui.IWorkbenchPreferenceConstants;import org.eclipse.ui.IWorkbenchWindow;import org.eclipse.ui.internal.WorkbenchPlugin;import org.eclipse.jdt.core.IJavaElement;import org.eclipse.jdt.internal.ui.JavaUIMessages;import org.eclipse.jdt.internal.ui.util.OpenTypeHierarchyUtil;
/** * A menu item for opening the type hierarchy perspective.   * <p> * We don't use an Action so that we can get the selection event and * have access to the modifier key settings. */public class OpenHierarchyPerspectiveItem extends ContributionItem {	private IJavaElement[] fElements;	private IWorkbenchWindow fWindow;	public OpenHierarchyPerspectiveItem(IWorkbenchWindow window, IJavaElement[] elements) {		fElements= elements;		fWindow= window;	}

	/* (non-Javadoc)	 * Method declared in ContributionItem	 */	public void fill(Menu menu, int index) {		MenuItem mi = new MenuItem(menu, SWT.PUSH, index);		mi.setText(JavaUIMessages.getString("OpenHierarchyPerspectiveItem.menulabel")); //$NON-NLS-1$		mi.addSelectionListener(new SelectionAdapter() {			public void widgetSelected(SelectionEvent e) {				run(e);			}		});	}
	private void run(SelectionEvent event) {		IPreferenceStore store= WorkbenchPlugin.getDefault().getPreferenceStore();		String perspectiveSetting=			store.getString(IWorkbenchPreferenceConstants.OPEN_NEW_PERSPECTIVE);		if ((event.stateMask & SWT.ALT) > 0)			perspectiveSetting =				store.getString(IWorkbenchPreferenceConstants.ALTERNATE_OPEN_NEW_PERSPECTIVE);		else {			if ((event.stateMask & SWT.SHIFT) > 0)				perspectiveSetting =					store.getString(IWorkbenchPreferenceConstants.SHIFT_OPEN_NEW_PERSPECTIVE);		}		OpenTypeHierarchyUtil.open(fElements, fWindow, perspectiveSetting);	}
}
