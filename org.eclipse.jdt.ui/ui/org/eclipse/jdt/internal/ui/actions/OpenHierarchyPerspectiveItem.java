/* * (c) Copyright IBM Corp. 2000, 2001. * All Rights Reserved. */package org.eclipse.jdt.internal.ui.actions;import org.eclipse.swt.SWT;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.widgets.Menu;import org.eclipse.swt.widgets.MenuItem;import org.eclipse.swt.widgets.Shell;import org.eclipse.jface.action.ContributionItem;import org.eclipse.jface.dialogs.MessageDialog;import org.eclipse.jface.preference.IPreferenceStore;import org.eclipse.ui.IPerspectiveDescriptor;import org.eclipse.ui.IPerspectiveRegistry;import org.eclipse.ui.IWorkbenchPage;import org.eclipse.ui.IWorkbenchPreferenceConstants;import org.eclipse.ui.IWorkbenchWindow;import org.eclipse.ui.PlatformUI;import org.eclipse.ui.WorkbenchException;import org.eclipse.ui.internal.WorkbenchPlugin;import org.eclipse.jdt.core.IType;import org.eclipse.jdt.core.JavaModelException;import org.eclipse.jdt.internal.ui.JavaPlugin;import org.eclipse.jdt.internal.ui.dialogs.ElementListSelectionDialog;import org.eclipse.jdt.internal.ui.javaeditor.EditorUtility;import org.eclipse.jdt.internal.ui.util.OpenTypeHierarchyHelper;import org.eclipse.jdt.ui.JavaElementLabelProvider;import org.eclipse.jdt.ui.JavaUI;
import org.eclipse.jdt.internal.ui.JavaUIMessages;
/** * A menu item for opening the type hierarchy perspective.   * <p> * We don't use an Action so that we can get the selection event and * have access to the modifier key settings. */public class OpenHierarchyPerspectiveItem extends ContributionItem {	private IType[] fTypes;	private IWorkbenchWindow fWindow;	public OpenHierarchyPerspectiveItem(IWorkbenchWindow window, IType[] types) {		fTypes= types;		fWindow= window;	}

	/* (non-Javadoc)	 * Fills the menu with perspective items.	 */	public void fill(Menu menu, int index) {		MenuItem mi = new MenuItem(menu, SWT.PUSH, index);		mi.setText(JavaUIMessages.getString("OpenHierarchyPerspectiveItem.menulabel")); //$NON-NLS-1$		mi.addSelectionListener(new SelectionAdapter() {			public void widgetSelected(SelectionEvent e) {				run(e);			}		});	}
	/**
	 * 
	 */
	public void run(SelectionEvent event) {		IPreferenceStore store= WorkbenchPlugin.getDefault().getPreferenceStore();		String perspectiveSetting=			store.getString(IWorkbenchPreferenceConstants.OPEN_NEW_PERSPECTIVE);		if ((event.stateMask & SWT.ALT) > 0)			perspectiveSetting =				store.getString(IWorkbenchPreferenceConstants.ALTERNATE_OPEN_NEW_PERSPECTIVE);		else {			if ((event.stateMask & SWT.SHIFT) > 0)				perspectiveSetting =					store.getString(IWorkbenchPreferenceConstants.SHIFT_OPEN_NEW_PERSPECTIVE);		}		new OpenTypeHierarchyHelper().open(fTypes, fWindow, perspectiveSetting);	}
}
