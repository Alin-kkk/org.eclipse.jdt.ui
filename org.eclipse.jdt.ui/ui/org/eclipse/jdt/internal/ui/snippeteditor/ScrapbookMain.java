/* * (c) Copyright IBM Corp. 2000, 2001. * All Rights Reserved. */package org.eclipse.jdt.internal.ui.snippeteditor;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.net.MalformedURLException;import java.net.URL;import java.net.URLClassLoader;import java.security.CodeSource;import java.security.ProtectionDomain;/** * Support class for launching a snippet evaluation */public class ScrapbookMain {		public static void main(String[] args) {		URL[] urls= getClasspath(args[0]);		if (urls == null) return;				while (true) {			try {				evalLoop(urls);			} catch (ClassNotFoundException e) {				return;			} catch (NoSuchMethodException e) {				return;			} catch (InvocationTargetException e) {				return;			} catch (IllegalAccessException e) {				return;			}		}		}		static void evalLoop(URL[] urls) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {		ClassLoader cl= new URLClassLoader(urls, null);		Class clazz= cl.loadClass("org.eclipse.jdt.internal.ui.snippeteditor.ScrapbookMain");		Method method= clazz.getDeclaredMethod("eval", new Class[] {Class.class});		method.invoke(null, new Object[] {ScrapbookMain.class});	}		public static void eval(Class clazz) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {		Method method=clazz.getDeclaredMethod("nop", new Class[0]);		method.invoke(null, new Object[0]);	}	public static void nop() {		try {			Thread.sleep(100);		} catch(InterruptedException e) {		}	}			static URL[] getClasspath(String urlString) {				URL url= null;				try {			url = new URL(urlString);		} catch (java.net.MalformedURLException e) {			return null;		}		ProtectionDomain pd = ScrapbookMain.class.getProtectionDomain();		if (pd == null) return null;		CodeSource cs = pd.getCodeSource();		if (cs == null) return null;		URL mainURL= cs.getLocation();		return new URL[] {mainURL, url};	}}