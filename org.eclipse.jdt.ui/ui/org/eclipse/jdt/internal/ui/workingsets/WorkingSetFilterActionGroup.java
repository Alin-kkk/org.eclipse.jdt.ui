/**********************************************************************Copyright (c) 2000, 2002 IBM Corp. and others.All rights reserved.   This program and the accompanying materialsare made available under the terms of the Common Public License v0.5which accompanies this distribution, and is available athttp://www.eclipse.org/legal/cpl-v05.html Contributors:	Daniel Megert - Initial implementation**********************************************************************/package org.eclipse.jdt.internal.ui.workingsets;import org.eclipse.core.runtime.IAdaptable;import org.eclipse.swt.events.DisposeEvent;import org.eclipse.swt.events.DisposeListener;import org.eclipse.swt.widgets.Shell;import org.eclipse.jface.action.IMenuManager;import org.eclipse.jface.action.IToolBarManager;import org.eclipse.jface.preference.IPreferenceStore;import org.eclipse.jface.util.Assert;import org.eclipse.jface.util.IPropertyChangeListener;import org.eclipse.jface.util.PropertyChangeEvent;import org.eclipse.jface.viewers.StructuredViewer;import org.eclipse.ui.IActionBars;import org.eclipse.ui.IMemento;import org.eclipse.ui.IWorkbenchPage;import org.eclipse.ui.IWorkingSet;import org.eclipse.ui.PlatformUI;import org.eclipse.ui.actions.ActionGroup;import org.eclipse.jdt.core.IJavaModel;import org.eclipse.jdt.internal.ui.JavaPlugin;import org.eclipse.jdt.internal.ui.packageview.PackagesMessages;import org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels;import org.eclipse.jdt.internal.ui.viewsupport.StandardJavaUILabelProvider;
/**
 * Working set filter actions (set / clear) *  * @since 2.0 * 
 */
public class WorkingSetFilterActionGroup extends ActionGroup {
	final private static String TAG_WORKING_SET_NAME= "workingSetName"; //$NON-NLS-1$	private StructuredViewer fViewer;	private String fPreferenceKey;	private WorkingSetFilter fWorkingSetFilter;		private IWorkingSet fWorkingSet= null;	private IAdaptable[] fCachedWorkingSet= null;		private ClearWorkingSetAction fClearWorkingSetAction;	private SelectWorkingSetAction fSelectWorkingSetAction;		private IPropertyChangeListener fPropertyChangeListener;	private IPropertyChangeListener fTitleUpdater;	public WorkingSetFilterActionGroup(StructuredViewer viewer, String viewId, Shell shell, IPropertyChangeListener titleUpdater) {		Assert.isNotNull(viewer);		Assert.isNotNull(viewId);		Assert.isNotNull(shell);		fViewer= viewer;		fTitleUpdater= titleUpdater;		fPreferenceKey= viewId + ".WorkingSetFilter." + TAG_WORKING_SET_NAME; //$NON-NLS-1$		fClearWorkingSetAction= new ClearWorkingSetAction(this);		fSelectWorkingSetAction= new SelectWorkingSetAction(this, shell);		fPropertyChangeListener= addWorkingSetChangeSupport();		// get initial values//		IPreferenceStore store= JavaPlugin.getDefault().getPreferenceStore();//		String workingSetName= store.getString(fPreferenceKey);//		IWorkingSet workingSet= PlatformUI.getWorkbench().getWorkingSetManager().getWorkingSet(workingSetName);//		fWorkingSet= workingSet;	}
	/**
	 * Returns the working set which is used by the filter.	 * 	 * @return the working set
	 */
	public IWorkingSet getWorkingSet() {
		return fWorkingSet;
	}
		
	/**
	 * Sets this filter's working set.	 * 	 * @param workingSet the working set
	 */
	public void setWorkingSet(IWorkingSet workingSet) {
		// store default for new view//		IPreferenceStore store= JavaPlugin.getDefault().getPreferenceStore();//		String workingSetName= ""; //$NON-NLS-1$//		if (workingSet != null)//			workingSetName= workingSet.getName();//		store.setValue(fPreferenceKey, workingSetName);		// Update action		fClearWorkingSetAction.setEnabled(workingSet != null);		// Update listeners		if (fWorkingSet != null)			fWorkingSet.removePropertyChangeListener(fPropertyChangeListener);		if (workingSet != null)			workingSet.addPropertyChangeListener(fPropertyChangeListener);			fWorkingSet= workingSet;		// Update viewer		if (fWorkingSetFilter != null) {			fWorkingSetFilter.setWorkingSet(workingSet);				fViewer.getControl().setRedraw(false);			fViewer.refresh();			if (fTitleUpdater != null)				fTitleUpdater.propertyChange(new PropertyChangeEvent(this, IWorkingSet.CHANGE_WORKING_SET_NAME_CHANGE, null, workingSet));			fViewer.getControl().setRedraw(true);		}	}
	/**	 * Saves the state of the filter actions in a memento.	 */	public void saveState(IMemento memento) {		String workingSetName= ""; //$NON-NLS-1$		if (fWorkingSet != null)			workingSetName= fWorkingSet.getName();		memento.putString(TAG_WORKING_SET_NAME, workingSetName);	}		/**	 * Restores the state of the filter actions from a memento.	 */		public void restoreState(IMemento memento) {		String workingSetName= memento.getString(TAG_WORKING_SET_NAME);		IWorkingSet ws= PlatformUI.getWorkbench().getWorkingSetManager().getWorkingSet(workingSetName);		setWorkingSet(ws);	}	/* (non-Javadoc)	 * @see ActionGroup#fillActionBars(IActionBars)	 */	public void fillActionBars(IActionBars actionBars) {		contributeToToolBar(actionBars.getToolBarManager());		contributeToMenu(actionBars.getMenuManager());	};		/**	 * Adds the filter actions to the tool bar	 */	public void contributeToToolBar(IToolBarManager tbm) {		// do nothing	}	/**	 * Adds the filter actions to the menu	 */	public void contributeToMenu(IMenuManager mm) {		mm.add(fSelectWorkingSetAction);		mm.add(fClearWorkingSetAction);	}		/* (non-Javadoc)	 * @see ActionGroup#dispose()	 */	public void dispose() {//		fViewer.removeFilter(fWorkingSetFilter);		super.dispose();	}		private IPropertyChangeListener addWorkingSetChangeSupport() {		final IPropertyChangeListener propertyChangeListener= createWorkingSetChangeListener();		fWorkingSetFilter= new WorkingSetFilter();		fViewer.addFilter(fWorkingSetFilter);		// Register listener on working set		if (fWorkingSet != null)					fWorkingSet.addPropertyChangeListener(propertyChangeListener);				// Register dispose listener which removes the listeners		fViewer.getControl().addDisposeListener(new DisposeListener() {			public void widgetDisposed(DisposeEvent e) {				if (fWorkingSetFilter.getWorkingSet() != null)					fWorkingSetFilter.getWorkingSet().removePropertyChangeListener(propertyChangeListener);								}		});				return propertyChangeListener;			}	private IPropertyChangeListener createWorkingSetChangeListener() {		return new IPropertyChangeListener() {			public void propertyChange(PropertyChangeEvent event) {				String property= event.getProperty();				if (IWorkbenchPage.CHANGE_WORKING_SET_REPLACE.equals(property)) {					IWorkingSet newWorkingSet= (IWorkingSet) event.getNewValue();					if (fWorkingSetFilter.getWorkingSet() != null)						fWorkingSetFilter.getWorkingSet().removePropertyChangeListener(this);					fWorkingSetFilter.setWorkingSet(newWorkingSet);						if (newWorkingSet != null)						newWorkingSet.addPropertyChangeListener(this);												fViewer.getControl().setRedraw(false);					fViewer.refresh();					if (fTitleUpdater != null)						fTitleUpdater.propertyChange(event);					fViewer.getControl().setRedraw(true);				} else if (IWorkingSet.CHANGE_WORKING_SET_NAME_CHANGE.equals(property)) {					if (fTitleUpdater != null)						fTitleUpdater.propertyChange(event);				} else if (IWorkingSet.CHANGE_WORKING_SET_CONTENT_CHANGE.equals(property)) {					fViewer.getControl().setRedraw(false);					fViewer.refresh();					fViewer.getControl().setRedraw(true);				}			}		};	}}